
Problem Link : https://leetcode.com/problems/sort-colors/description/

75. Sort Colors
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

Constraints:
    n == nums.length
    1 <= n <= 300
    nums[i] is either 0, 1, or 2.
Follow up: Could you come up with a one-pass algorithm using only constant extra space?

####### Solution One My Solution ######
Simply cound the numbers of 0's ,1's , 2's in the array in one iteration. 
Then reassign the values of the arry with the number of values found for each element. 
Like if we found 2 0's in then assign first 2 values of the array to 0.
If we found 4 1's then assign next 4 values to 1;

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int length = nums.size();
        int numOfZero=0;
        int numOfOne=0;
        int numOfTwo=0;
        for(int i=0;i<length;i++){
            if(nums[i]==0) numOfZero++;
            if(nums[i]==1) numOfOne++;
            if(nums[i]==2) numOfTwo++;
        }
        for(int i=0;i<length;i++){
            if(numOfZero>0){
                nums[i]=0;
                numOfZero--;
            }
            else if(numOfOne>0){
                nums[i]=1;
                numOfOne--;
            }
            else if(numOfTwo>0){
                nums[i]=2;
                numOfTwo--;
            }
        }
    }
};

This solutin does takes two loops so its 2n time complexity. 
Lets see if we can do it in single itration. 

### Dutch National Flag Algo ###############

Explenation video here : https://www.youtube.com/watch?v=tp8JIuCXBaU&list=PLgUwDviBIf0oF6QL8m22w1hIDC1vJ_BHz&index=21

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int length = nums.size();
        int start=0,mid = 0 ;
        int end = length-1;
        for(int i=0;i<length;i++){
            if(nums[mid]==0){
                swap(nums[start],nums[mid]);
                start++;
                mid++;
 
            }
            else if(nums[mid]==1){
                mid++;
            }else if(nums[mid]==2){
                swap(nums[end],nums[mid]);
                end--;
            }
        }
        
    }
};


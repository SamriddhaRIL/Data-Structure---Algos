Leetcode link : https://leetcode.com/problems/merge-sorted-array/description/
Video link : https://www.youtube.com/watch?v=n7uwj04E0I4

88. Merge Sorted Array

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n. 

Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

 

Constraints:

    nums1.length == m + n
    nums2.length == n
    0 <= m, n <= 200
    1 <= m + n <= 200
    -109 <= nums1[i], nums2[j] <= 109

 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?

###################### Solution one #######################################################################
This is the answer I came up with : 
I am having two pointers to move with array1 and array2. 
We compare the element of array1 and array2 & which ever is smaller we push it to our 
third array. We sort all the elements like this. 
This answer is having optimal time complexity as we are using single iteration to do the merging. 
But we are using extra space by creating new array. Can we do it inplace without allocating any new array. 

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=0;
        int j=0;
        if(n==0){
            return;
        }
        if(m==0){
            nums1=nums2;
            return;
        }
        vector<int> result;
        while(i<m || j<n){

            // check if elements in num1 are finished then put all the remaining elements of num2 in the result array to complete 
            // the marging. 
            if(i==m){
                result.push_back(nums2[j]);
                j++;
            }else if(j==n){
                // if nums2 elements are finished then put all the remaining elements of num1 in the result array to complete 
                // the marging. 
                result.push_back(nums1[i]);
                i++;
            } else if(nums1[i]==nums2[j]) {
                result.push_back(nums1[i]);
                result.push_back(nums2[j]);
                j++;
                i++;
            }else if(nums2[j]<nums1[i]){
                result.push_back(nums2[j]);
                j++;
            }else{
                result.push_back(nums1[i]);
                i++;
            }
        }

        nums1 = result;
    }
};

2nd solution is this way : 

First we merge the two arrays straight forwardly. 
And then sort the array again. 
Time complexity here will be worse as its -> o(n) (for merging the arrays) + mLogm (for sorting).
But space complexity will be optimal -> O(1). As we are not using any extra space here.

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        if(n==0){
            return;
        }
        if(m==0){
            nums1=nums2;
            return;
        }
        int s=0;
        while(s<n){
            nums1[m+s] = nums2[s];
            s++;
        }
        sort(nums1.begin(),nums1.end());
    }
};




############# 3 Sums Problem ####################

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

 

Constraints:

    3 <= nums.length <= 3000
    -105 <= nums[i] <= 105


################ Solutions ################### 

Brude :: --> 
With O(n3) time complexity. As we are running 3 for loops to solve the problem.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int size = nums.size();
        set<vector<int>> output;
        for(int i=0; i<size;i++){
            set<int> mSet;
            for(int j=i+1;j<size;j++){
                for(int k=j+1;k<size;k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        vector<int> temp = {nums[i],nums[j],nums[k]};
                        sort(temp.begin(),temp.end());
                        output.insert(temp);
                    }
                }
            }
        }

        vector<vector<int>> answer(output.begin(),output.end());
        return answer;
    }
};

Better --> 

Here we are able to remove the third loop by using set data structure.
But still we are using extra space by using extra set<vector<int>> output; this variable. 
Probably we can optimise this by not using the extra space set takes. 

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int size = nums.size();
        set<vector<int>> output;
        for(int i=0; i<size;i++){
            set<int> mSet;
            for(int j=i+1;j<size;j++){
                int thirdElement = -(nums[i]+nums[j]);
                if(mSet.find(thirdElement)!=mSet.end()){
                    vector<int> triplet = {nums[i],nums[j],thirdElement};
                    sort(triplet.begin(),triplet.end());
                    output.insert(triplet);
                }
                mSet.insert(nums[j]);

            }
        }

        vector<vector<int>> answer(output.begin(),output.end());
        return answer;
    }
};

Optimal Solution --> 
2 ponter approach aling with sorting the list at first. 
Explenation video link : https://www.youtube.com/watch?v=DhFh8Kw7ymk
Basically we sort the list first then. Iterate over the whole loop.
For every iteration we do a 2pointers search for the rest of the elements in the list. 

Time complexity : 
nLogN (Sorting the array) + O(n) (iterating through the list) * O (n) (while loop runs from n-1,n-2,n-3 times...)
= nLogN + o(n2)

Space complexity : O(number of unique triplets)


vector<vector<int>> threeSum(vector<int>& nums) {
        int size = nums.size();
        vector<vector<int>> answer;
        sort(nums.begin(),nums.end());
        for(int i=0;i<size;i++){
            if(i>0 && (nums[i]==nums[i-1])) continue;
            int j = i+1;
            int k = size-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum<0){
                    j++;
                } else if(sum>0){
                    k--;
                } else {
                    vector<int> triplet = {nums[i],nums[j],nums[k]};
                    answer.push_back(triplet);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
        }

        return answer;
    }






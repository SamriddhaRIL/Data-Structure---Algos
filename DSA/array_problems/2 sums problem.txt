1. Two Sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


Constraints:

    2 <= nums.length <= 104
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    Only one valid answer exists.

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?



Brude Force Answer --> 

It will be something like this. We are using two loos to find the elements. 
This is having time complexity --> O(n2).

vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        int i=0;
        vector<int> ans;
        for(i=0;i<n;i++){
            int j = i+1;
            while(j<n){
                int currentSum = nums[i]+nums[j];
                if(currentSum==target) return {i,j};
                j++;
            }
        }
        return ans;
    }

Lets see if we can optimise this -->
Better solution in terms of time complexity as it takes O(nLogn) (sorting) + O(n) (for iterating) ;
But it does take more space as we using hashmap to store the values. 
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        map<int,int> mp;
        vector<int> ans;
        for(int i=0;i<n;i++){
            int current = nums[i];
            int req = target - current;
            if(mp.find(req)!=mp.end()){
                return {mp[req],i};
            }else{
                mp[current] = i;
            }
        }

        return {};
    }
};


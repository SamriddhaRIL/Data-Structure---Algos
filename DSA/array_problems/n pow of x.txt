Link : https://leetcode.com/problems/powx-n/
Youtbe : https://www.youtube.com/watch?v=l0YC3876qxg

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:

    -100.0 < x < 100.0
    -231 <= n <= 231-1
    n is an integer.
    Either x is not zero or n > 0.
    -104 <= xn <= 104

####### My sloution : Brude force ######## 

class Solution {
public:
    double myPow(double x, int n) {
        long double answer = x;
        int limit = n;
        
        if(n<0){
            limit = -(n);
        }
        for (int i=0;i<limit-1;i++){
            answer = answer * x;
        }

        
        if(n<0) return (1/answer);
        else if(n==0) return (x/x);
        else return answer;
    }
};

TLE comes with this test case : 
x =
0.00001
n =
2147483647


########### Strivers solution ######## 
class Solution {
public:
    double myPow(double x, int n) {
        double answer = 1.0;
        long long limit = n;
        long long copy = n;

        if(n<0){
            limit = -1 * (long)n;
            copy = -1 * (long)n ;
        } 
        
        for (int i=0;i<limit;i++){
            if(copy==0) break;
            if(copy%2==1) {
                answer = answer*x;
                copy--;
            }else{
                x = x*x;
                copy = copy/2;
            }

        }

        
        if(n<0) return (1/answer);
        else return answer;
    }
};
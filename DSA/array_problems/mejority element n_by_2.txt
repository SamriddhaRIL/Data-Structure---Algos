
Problem Link : https://takeuforward.org/data-structure/find-the-majority-element-that-occurs-more-than-n-2-times/
https://leetcode.com/problems/majority-element/description/

Video explanation : https://www.youtube.com/watch?v=nP_ns3uSh80


169. Majority Element
Solved
Easy
Topics
premium lock iconCompanies

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3

Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

 

Constraints:

    n == nums.length
    1 <= n <= 5 * 104
    -109 <= nums[i] <= 109

 
Follow-up: Could you solve the problem in linear time and in O(1) space?


######## Brude Force ##########

Loop over each and every element and check for its occurance, if a particular element occures 
more than n/2 times then return that element. 

#include <bits/stdc++.h>
using namespace std;

int majorityElement(vector<int> v) {

    //size of the given array:
    int n = v.size();

    for (int i = 0; i < n; i++) {
        //selected element is v[i]
        int cnt = 0;
        for (int j = 0; j < n; j++) {
            // counting the frequency of v[i]
            if (v[j] == v[i]) {
                cnt++;
            }
        }

        // check if frquency is greater than n/2:
        if (cnt > (n / 2))
            return v[i];
    }

    return -1;
}

int main()
{
    vector<int> arr = {2, 2, 1, 1, 1, 2, 2};
    int ans = majorityElement(arr);
    cout << "The majority element is: " << ans << endl;
    return 0;
}



######## Meadian Solution using Hash Map  ##########

We can do it using hashmap, but it takes extra space. 
Time Complexity: O(N*logN) + O(N), where N = size of the given array.
Reason: We are using a map data structure. Insertion in the map takes logN time. And we are doing it for N elements.
So, it results in the first term O(N*logN). The second O(N) is for checking which element occurs more than floor(N/2) times. 
If we use unordered_map instead, 
the first term will be O(N) for the best and average case and for the worst case, it will be O(N2).

#include <bits/stdc++.h>
using namespace std;

int majorityElement(vector<int> v) {

    //size of the given array:
    int n = v.size();

    //declaring a map:
    map<int, int> mpp;

    //storing the elements with its occurnce:
    for (int i = 0; i < n; i++) {
        mpp[v[i]]++;
    }

    //searching for the majority element:
    for (auto it : mpp) {
        if (it.second > (n / 2)) {
            return it.first;
        }
    }

    return -1;
}

int main()
{
    vector<int> arr = {2, 2, 1, 1, 1, 2, 2};
    int ans = majorityElement(arr);
    cout << "The majority element is: " << ans << endl;
    return 0;
}


###### Optimal Approach: Moore’s Voting Algorithm #############

Intuition:

If the array contains a majority element, its occurrence must be greater than the floor(N/2). Now, we can say that the count of minority elements and majority elements is equal up to a certain point in the array. So when we traverse through the array we try to keep track of the count of elements and the element itself for which we are tracking the count. 

After traversing the whole array, we will check the element stored in the variable. If the question states that the array must contain a majority element, the stored element will be that one but if the question does not state so, then we need to check if the stored element is the majority element or not. If not, then the array does not contain any majority element.
Approach: 

    Initialize 2 variables:
    Count –  for tracking the count of element
    Element – for which element we are counting
    Traverse through the given array.
        If Count is 0 then store the current element of the array as Element.
        If the current element and Element are the same increase the Count by 1.
        If they are different decrease the Count by 1.
    The integer present in Element should be the result we are expecting 


Code : 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0;
        int element=0;
        for(int i=0;i<nums.size();i++){
            if(count==0){
                element = nums[i];
                count++;
            }else if(nums[i]==element){
                count++;
            }else{
                count--;
            }
        }

        int occurance=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==element){
                occurance++;
            }
        }

        if(occurance>(nums.size()/2)){
            return element;
        }

        return -1;
    }
};


